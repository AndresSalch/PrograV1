@page "/Create"
<style>
    .center {
    display: flex;
    justify-content: center; 
    align-items: center; 
    height: 100vh; 
    }
    .input{
    width: 40% !important;
    background-color: #1e1e1e;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
    }
</style>
@if(gotUser){
    <label for="basic-url" class="form-label">Mostrando Rutina para @currentUser.nombre</label>
    <br>
    <ConfirmDialog Style="color: black;" @ref="create" />
    <Button Size="ButtonSize.ExtraLarge" Class="item" @onclick="ShowCreateAsync"> Agregar Nueva Rutina de Ejercicios </Button>
    <Button Size="ButtonSize.ExtraLarge" Class="item danger" @onclick="StateHasChanged"> Actualizar Lista </Button>

    <Grid TItem="unionRutina"
    Class="gidit table table-hover table-bordered table-striped text-primary-emphasis"
    DataProvider="RoutineDataProvider"
    AllowFiltering="true"
    AllowPaging="true"
    PageSize="5"
    AllowSorting="false"
    AllowSelection="false"
    SelectionMode="GridSelectionMode.Multiple"
    Responsive="true">

        <GridColumns>
            <GridColumn TItem="unionRutina" HeaderText="Rutina" PropertyName="rutina" SortKeySelector="item => item.nombreRutina">
                @context.nombreRutina
            </GridColumn>
            <GridColumn TItem="unionRutina" HeaderText="Ejercicio" PropertyName="ejercicio" SortKeySelector="item => item.descripcion">
                @context.descripcion
            </GridColumn>
            <GridColumn TItem="unionRutina" HeaderText="Categoria" PropertyName="categoria" SortKeySelector="item => item.categoria">
                @context.categoria
            </GridColumn>
            <GridColumn TItem="unionRutina" HeaderText="Series" PropertyName="series" SortKeySelector="item => item.cantidadseries">
                @context.cantidadseries
            </GridColumn>
            <GridColumn TItem="unionRutina" HeaderText="Repeticiones" PropertyName="repeticiones" SortKeySelector="item => item.repeticiones">
                @context.repeticiones
            </GridColumn>
            <GridColumn TItem="unionRutina" HeaderText="Estado" PropertyName="estado" SortKeySelector="item => item.estado">
                @context.estado
            </GridColumn>
            <GridColumn TItem="unionRutina" HeaderText="Instrucciones" PropertyName="instrucciones" SortKeySelector="item => item.descripcionRutina">
                @context.descripcionRutina
            </GridColumn>
        </GridColumns>

    </Grid>
}else{
    <div class="center">
        <div class="container text-center input">
            <div class="row">
                <div class="col">
                    <h1>Crear Rutinas</h1>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <p>Digite la cédula de usuario a crear sus rutinas</p>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <input type="text" class="form-control" @bind-value="@id" placeholder="Numero de Cédula" aria-label="Username" aria-describedby="basic-addon1">
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <br />
                    <button type="button" @onclick="() => checkUser()" class="btn btn-primary normal">Confirmar</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    @inject NavigationManager _navigationManager
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    private bool gotUser = false;
    private string id = "";
    private cCliente? currentUser;
    private IEnumerable<cCategoria>? category = default!;
    private IEnumerable<cEjercicio>? exercice = default!;
    private IEnumerable<cRutina>? routine = default!;
    private IEnumerable<cRutinaEjercicio>? routineE = default!;

    private blCliente clientbl = new();
    private blCategoria categobl = new();
    private blEjercicio ejerbl = new();
    private blRutina rutinabl = new();
    private blRutinaEjercicio rutinaEbl = new();
    private IEnumerable<unionRutina>? routineState = default!;

    private ConfirmDialog create = default!;


    protected override async Task OnInitializedAsync()
    {
        if (currentUser != null)
        {
            gotUser = true;
        }
    }

    private void ReloadPage()
    {
        _navigationManager.Refresh();
    }

    private async Task checkUser()
    {
        try
        {
            currentUser = await clientbl.getModelId(id);
            if (currentUser != null)
            {
                gotUser = true;
                StateHasChanged();
            }
            else
            {
                gotUser = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching user: {ex.Message}");
            gotUser = false;
            StateHasChanged();
        }
    }

    private async Task fillListas()
    {
        try
        {
            category = await categobl.getModel();
            exercice = await ejerbl.getModel();
            routine = await rutinabl.getModel();
            routineE = await rutinaEbl.getModel();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching data: {ex.Message}");
        }
    }

    private async Task<GridDataProviderResult<unionRutina>> RoutineDataProvider(GridDataProviderRequest<unionRutina> request)
    {
        try
        {
            if (routineE == null)
            {
                await fillListas();
            }

            var tempU = routineE.Join(routine, re => re.idrutina, r => r.idrutina, (re, r) => new { re, r })
                                .Join(exercice, re_r => re_r.re.idejercicio, e => e.idejercicio, (re_r, e) => new { re_r, e })
                                .Join(category, re_r_e => re_r_e.e.idcategoria, c => c.idcategoria,
                                       (re_r_e, c) => new unionRutina
                                           {
                                               idejercicio = re_r_e.e.idejercicio,
                                               idcategoria = c.idcategoria,
                                               idrutina = re_r_e.re_r.r.idrutina,
                                               nombre = currentUser?.nombre ?? "Unknown",
                                               descripcion = re_r_e.e.descripcion,
                                               categoria = c.categoria,
                                               nombreRutina = re_r_e.re_r.r.nombre,
                                               identificacion = re_r_e.re_r.r.identificacion,
                                               estado = re_r_e.re_r.r.estado,
                                               cantidadseries = re_r_e.re_r.re.cantidadseries,
                                               repeticiones = re_r_e.re_r.re.repeticiones,
                                               descripcionRutina = re_r_e.re_r.re.descripcion
                                           }).ToList();

            return await Task.FromResult(request.ApplyTo(tempU)); 
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error occurred in RoutineDataProvider: {ex.Message}");
            return null;
        }
        finally
        {
            PreloadService.Hide();
        }
    }

    private async Task ShowCreateAsync()
    {
        var options = new ConfirmDialogOptions
            {
                IsVerticallyCentered = true,
                YesButtonText = "Crear",
                YesButtonColor = ButtonColor.Primary,
                NoButtonText = "Volver",
                NoButtonColor = ButtonColor.Danger
            };

        var item1 = new cRutinaDTO();
        var item2 = new cRutinaEjercicio();
        var list = await ejerbl.getModel();

        var parameters = new Dictionary<string, object>
    {
        { "exercises", list },
        { "newRut", item1 },
        { "newRutE", item2 },
        { "OnDataUpdated1", EventCallback.Factory.Create<cRutinaDTO>(this, (updatedData) =>
        {
            item1 = updatedData;
            StateHasChanged();
        })},
        { "OnDataUpdated2", EventCallback.Factory.Create<cRutinaEjercicio>(this, (updatedData) =>
        {
            item2 = updatedData;
            StateHasChanged();
        })}
    };
        var confirmation = await create.ShowAsync<CreateRutinaPostComponent>("Añadir Rutinas", parameters, confirmDialogOptions: options);

        if (confirmation)
        {
            try
            {
                PreloadService.Show(SpinnerColor.Dark);
                item1.identificacion = currentUser.identificacion;
                await rutinabl.postModel(item1);
                var tempr = await rutinabl.getModel();

                foreach(var r in tempr)
                {
                    if(r.nombre == item1.nombre && r.identificacion == item1.identificacion && r.estado == item1.estado)
                    {
                        item2.idrutina = r.idrutina;
                    }
                }

                await rutinaEbl.postModel(item2);
            }
            catch
            {

            }
            finally
            {
                PreloadService.Hide();
                ReloadPage();
            }
        }
        else
        {
        }
    }
}
