@page "/Ejercicio"

<ConfirmDialog @ref="create" />
<Button Size="ButtonSize.ExtraLarge" style="background-color: #89f336;" @onclick="ShowCreateAsync"> Agregar Nuevo Ejercicio </Button>

<Button Size="ButtonSize.ExtraLarge" style="background-color: #89f336;" @onclick="ReloadPage"> Actualizar Lista </Button>

<Grid TItem="auxEjercicio"
      Class="gidit table table-hover table-bordered table-striped text-primary-emphasis"
      DataProvider="ExerciseDataProvider"
      AllowFiltering="true"
      AllowPaging="true"
      PageSize="5"
      AllowSorting="true"
      AllowSelection="false"
      SelectionMode="GridSelectionMode.Multiple"
      Responsive="true">

    <GridColumns>
        <GridColumn TItem="auxEjercicio" HeaderText="Categoria" PropertyName="categoria" SortKeySelector="item => item.categoria">
            @context.categoria
        </GridColumn>
        <GridColumn TItem="auxEjercicio" HeaderText="Ejercicio" PropertyName="ejercicio" SortKeySelector="item => item.descripcion">
            @context.descripcion
        </GridColumn>
        <GridColumn TItem="auxEjercicio" HeaderText="Acciones" PropertyName="actions">
            <ConfirmDialog @ref="dialog2" />
            <Button Color="ButtonColor.Primary" @onclick="() => ShowUpdateAsync(context)"> Actualizar </Button>
            <ConfirmDialog @ref="dialog" />
            <Button Color="ButtonColor.Danger" @onclick="() => ShowDeleteAsync(context)"> Eliminar </Button>
        </GridColumn>
    </GridColumns>

</Grid>

@code {

    @inject NavigationManager _navigationManager
    [Inject] protected PreloadService PreloadService { get; set; } = default!;
    [Inject] ToastService ToastService { get; set; } = default!;

    private IEnumerable<cEjercicio> ejercicios = default!;
    private IEnumerable<auxEjercicio> ejerciciosaux = default!;
    private HashSet<auxEjercicio> select = new();
    private blEjercicio service1 = new blEjercicio();
    private blCategoria service2 = new blCategoria();
    private ConfirmDialog dialog = default!;
    private ConfirmDialog dialog2 = default!;
    private ConfirmDialog create = default!;

    private void ReloadPage()
    {
        _navigationManager.Refresh();
    }


    private async Task<GridDataProviderResult<auxEjercicio>> ExerciseDataProvider(GridDataProviderRequest<auxEjercicio> request)
    {
        try
        {
            PreloadService.Show(SpinnerColor.Dark);

            if (ejercicios is null)
                ejercicios = await service1.getModel();

            List<auxEjercicio> ejerciciosaux = new List<auxEjercicio>();

            foreach (var ex in ejercicios)
            {
                var cate = await service2.getModelId(ex.idcategoria);  

                if (cate != null)
                {
                    ejerciciosaux.Add(new auxEjercicio
                        {
                            idejercicio = ex.idejercicio,
                            idcategoria = ex.idcategoria,
                            descripcion = ex.descripcion,
                            categoria = cate.categoria
                        });
                }
                else
                {
                    ejerciciosaux.Add(new auxEjercicio
                        {
                            idejercicio = ex.idejercicio,
                            idcategoria = ex.idcategoria,
                            descripcion = ex.descripcion,
                            categoria = "No existe" 
                        });
                }
            }

            return await Task.FromResult(request.ApplyTo(ejerciciosaux));
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error occurred: " + ex.Message);
            return null;
        }
        finally
        {
            PreloadService.Hide();
        }
    }


    private async Task ShowCreateAsync()
    {
        var options = new ConfirmDialogOptions
            {
                IsVerticallyCentered = true,
                YesButtonText = "Crear",
                YesButtonColor = ButtonColor.Primary,
                NoButtonText = "Volver",
                NoButtonColor = ButtonColor.Danger
            };

        var item = new cEjercicioDTO();
        var cate = await service2.getModel();

        var parameters = new Dictionary<string, object>
    {
        { "data", item },
        { "data2", cate },
        { "OnDataUpdated", EventCallback.Factory.Create<cEjercicioDTO>(this, (updatedData) =>
        {
            item = updatedData;
            StateHasChanged();
        })}
    };
        var confirmation = await dialog2.ShowAsync<EjercicioPostComponent>("Añadir Ejercicio", parameters, confirmDialogOptions: options);

        if (confirmation)
        {
            try
            {
                PreloadService.Show(SpinnerColor.Dark);
                await service1.postModel(item);
            }
            catch
            {

            }
            finally
            {
                PreloadService.Hide();
                ReloadPage();
            }
        }
        else
        {
        }
    }

    private async Task ShowUpdateAsync(auxEjercicio aux)
    {
        var options = new ConfirmDialogOptions
            {
                IsVerticallyCentered = true,
                YesButtonText = "Terminar",
                YesButtonColor = ButtonColor.Primary,
                NoButtonText = "Volver",
                NoButtonColor = ButtonColor.Danger
            };

        var cate = await service2.getModel();
        var parameters = new Dictionary<string, object>
    {
        { "data", aux },
        { "data2", cate },
        { "OnDataUpdated", EventCallback.Factory.Create<auxEjercicio>(this, (updatedData) =>
        {
            aux = updatedData;
            StateHasChanged();
        })}
    };
        var confirmation = await dialog2.ShowAsync<EjercicioPutComponent>("Actualizar", parameters, confirmDialogOptions: options);

        if (confirmation)
        {
            try
            {
                PreloadService.Show(SpinnerColor.Dark);
                var item = new cEjercicio() { idejercicio = aux.idejercicio, idcategoria = aux.idcategoria, descripcion = aux.descripcion };
                await service1.putModel(item);
            }
            catch
            {

            }
            finally
            {
                PreloadService.Hide();
                ReloadPage();
            }
        }
        else
        {
        }
    }

    private async Task ShowDeleteAsync(auxEjercicio aux)
    {
        var options = new ConfirmDialogOptions
            {
                IsVerticallyCentered = true,
                YesButtonText = "Confirmar",
                YesButtonColor = ButtonColor.Primary,
                NoButtonText = "Cancelar",
                NoButtonColor = ButtonColor.Danger
            };
        var item = new cEjercicio() { idejercicio = aux.idejercicio, idcategoria = aux.idcategoria, descripcion = aux.descripcion };
        var confirmation = await dialog.ShowAsync(
            title: $"Seguro que desea eliminar {item.descripcion}?",
            message1: "Esto va a eliminar la información del cliente, ya no habrá vuelta atrás",
            message2: "Desea continuar?",
            confirmDialogOptions: options);

        if (confirmation)
        {
            try
            {
                PreloadService.Show(SpinnerColor.Dark);
                await service1.deleteModel(item);
            }
            catch
            {

            }
            finally
            {
                PreloadService.Hide();
                ReloadPage();
            }
        }
        else
        {
        }
    }

    private void OnThemeChanged(string themeName)
    {

        ToastService.Notify(new(ToastType.Success, $"Theme changed to {themeName}"));
    }
}